# 第三步骤：
server.port=8080
server.tomcat.uri-encoding=utf-8
#MySQL
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#WARN: (Establishing SSL connection without server's identity verification is not recommended.-> userSSL=false)
spring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false
spring.datasource.username=root
spring.datasource.password=123
#spring JPA配置（这一段的意思就是说，数据库类型为MYSQL，日志信息打印具体执行的sql语句，表更新策略以及Java类到数据库表字段的映射规则等，具体查看网络资料。）
#Spring Data JPA
spring.jpa.database=MYSQL 
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update 
# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# stripped before adding them to the entity manager)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

#第六步骤、在application.properties文件中配置页面引擎(这里采用SpringMVC（SpringBoot还提供thymeleaf，freemaker等）。
# 这里需要配置其静态资源（js、css文件、图片文件等）路径，以及html页面文件路径，参考SpringMVC在Spring下的配置。)
#视图层控制
spring.mvc.view.prefix=classpath:/templates/
spring.mvc.view.suffix=.html
spring.mvc.static-path-pattern=/static/**
#视图渲染期间 (禁止 执行数据库查询)
spring.jpa.open-in-view=false

#第不知道多少步(自定义key-value的值使用)
com.netease.teacher=Tony
#多环境配置 //此处的test值应该与该文件名application-test相一致；(ps:可以通过更改port，进行测试)
#默认下是本身properties文件配置，其value是什么，就响应相对应的application-value.properties；

logging.file=log/myDev.log
logging.path=./log/logPath
logging.pattern.file=%d{yyyy/MM/dd} === [%thread] === %-5level  ===  %logger{50}  ==  %msg%n
logging.level.com=trace